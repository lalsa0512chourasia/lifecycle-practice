What do you understand by Virtual DOM? Explain its working.

whenever any html,css and js file goes to the browser and runs first time so it create tree like structure this structure is known as DOM.
The changes which we make in component, these changes will be combined and create a new virtual dom. (that is exact copy of Real Dom only.)
Now these two virtual doms will get compared with each other and will check for the new changes. this complete procedure is known as diffing algorithm.
Now the new changes will be updated in your Real dom. this procedure is known as Recoinciliation.
Comparision => Diffing  Algorithm.
Update in RealDom => Recoinciliation

Why canâ€™t browsers read JSX?
# Browser reads only Javascript objects but JSX is not regular Javascript object.
# Thus to enable a browser to read JSX, first, we need to transform JSX file into a JavaScript object using JSX transformers like Babel and then pass it to the browser.
# BABEL : -
=> Babel is a Javascript transpiler.
=> It converts new JS version (ES6 and JSX) to old version (ES5), so that it can be run in the browser. 
=> Browsers does not support ES6, so we use Babel to compile ES6 to ES5.


What is the purpose of render() in React.

# React JS library has 2 components i.e. functional and class components.
# Class components uses render() function.
# React renders HTML to the web page by using a func. called render().
(The ReactDOM.render() function takes two arguments, HTML code and an HTML element.)
# Purpose of the function is to display the specified HTML code inside the specified HTML element.
# In the render() method , we can read props and state and return our JSX code to the root Component of our app.



Differentiate between states and props.

 #            Props                                                             #     State
-    Props are read only                      - State is both read and write (State changes can be asynchronous.)
-  Props are immutable.                       - State is mutable. (can be modified)  
- in props we can pass data from one compon.  - State allows to pass data within the component only
   to other compon. as an argument
- Props are external and controlled           - State is internal and controlled by the React component itself.
   by whatever renders the component.



How can you update the state of a component?

 * To update our state, we use this.setState() and pass in an object. This object will get merged with the current state.
When the state has been updated, our component re-renders automatically.


Explain the lifecycle methods of React components in detail.
# Lifecycle Methods ( Class Component )

## Mounting :
When an instance of a component is being created and inserted into the DOM.

## Updating :
When a component is being re-render as a result of changes to either its props or state 

## Unmounting : 
When a component is being removed from the DOM



## Mounting :
1. constructor                      [ only in mounting ]
2. static getDerivedStateFromProps
3. render   
4. componentDidMount                [ only in mounting ]

## Updating :
1. static getDerivedStateFromProps
2. shouldComponentUpdate
3. render
4. getSnapshotBeforeUpdate
5. componentDidUpdate

## Unmounting : 
1. componentWillUnmount




# Mouting Phase
### Constructor
- constructor is a initial phase where we set our state variabels using this.state
{} => this bracket is for to write JS in HTML(JSX)

- A special type of function that will get called whenever a new component is created.
- Used to initialize states & Binding events.
- Not perform, Http req.

### static getDerivedStateFromProps (rarely used)
- When the state of component depends on change in props.
- set the state
- Not perform, Http req.


### render
- Only Required Method
- Return JSX
- Children component Lifecycle methods also get execute
- Not perform, Http req.


### componentDidMount
- Invoked immediately after a component and its child components have been rendered to DOM
- Perform any AJAX call to load data.



# Updating Phase
### static getDerivedStateFromProps
- Method is called every time a component is re-rendered.
- set the state
- Not perform, Http req.

### shouldComponentUpdate
- Dictates if the component should re-render or not.
- Perfomance Optimization
- Not perform, Http req.

### Render
- Only Required Method
- Return JSX
- Not perform, Http req.

### getSnapshotBeforeUpdate()    [Rarely Used]
- Called right before the changes from the virtual DOM are to be reflected in the DOM.
- Capture some Information From DOM

### componentDidUpdate()
- called after the render is finished in the re-render Cycles.
<!-- - Cause side effects -->


### Unmounting Phase ( LAST WISH )
- Method is invoked immediately before a component is unmounted and destroyed.
- Cancelling any network req. , also invalidating timers.
- DO NOT CALL THE SetSTATE METHOD